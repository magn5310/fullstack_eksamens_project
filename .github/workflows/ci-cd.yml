# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ magnus-docker ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: kebab_reviews_test
          MYSQL_USER: kebabuser
          MYSQL_PASSWORD: kebabpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci --legacy-peer-deps

    - name: Setup test database
      working-directory: ./client
      env:
        DATABASE_URL: "mysql://kebabuser:kebabpass@localhost:3306/kebab_reviews_test"
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: Run tests
      working-directory: ./client
      env:
        DATABASE_URL: "mysql://kebabuser:kebabpass@localhost:3306/kebab_reviews_test"
        JWT_SECRET: "test-secret-key"
        NODE_ENV: test
      run: |
        npm run lint
        # Add your test command here when you have tests
        # npm test

    - name: Build application
      working-directory: ./client
      env:
        DATABASE_URL: "mysql://kebabuser:kebabpass@localhost:3306/kebab_reviews_test"
        JWT_SECRET: "test-secret-key"
        NODE_ENV: production
      run: npm run build

  # Build development image
  build-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push DEV image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
        target: dev

  # Build production image  
  build-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push PROD image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        target: runner

  # Security scanning
  security-scan:
    needs: [build-dev, build-prod]
    if: always() && (needs.build-dev.result == 'success' || needs.build-prod.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
    - name: Set image tag
      id: image-tag
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy job (kun pÃ¥ main branch)
  deploy:
    needs: [test, build-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
    - name: Deploy to production
      id: deploy
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # Her kan du tilfÃ¸je din deployment logik
        # Fx deployment til cloud provider, server etc.
        
        # Eksempel pÃ¥ deployment til en server via SSH:
        # - name: Deploy to server
        #   uses: appleboy/ssh-action@v1.0.0
        #   with:
        #     host: ${{ secrets.HOST }}
        #     username: ${{ secrets.USERNAME }}
        #     key: ${{ secrets.SSH_KEY }}
        #     script: |
        #       docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        #       docker-compose down
        #       docker-compose up -d