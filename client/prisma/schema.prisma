// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {  
  id        String   @id @default(uuid())
  email     String   @map("user_email") @unique
  firstName String   @map("user_firstname") 
  lastName  String   @map("user_lastname")
  password  String   @map("user_password")
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @map("user_roleId")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  reviews   Review[]
  restaurants Restaurant[]
  
  @@index([email])
  @@index([roleId])
  @@map("users")  
}

model Role {
  id     String      @id @default(uuid())
  name   String   @map("role_name") @unique
  users  User[]
  @@map("roles")
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String   @map("restaurant_name")
  address   String   @map("restaurant_address")
  slug      String   @map("restaurant_slug") @unique
  description String   @map("restaurant_description")
  openHours   String   @map("restaurant_open_hours")
  phone     String   @map("restaurant_phone")
  website   String   @map("restaurant_website")
  imageUrl String? @db.LongText @map("restaurant_photo_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ownerId   String   @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id])
  reviews   Review[]

  @@index([name])
  @@index([address])
  @@index([ownerId])
  @@index([createdAt])
  @@map("restaurants")
}

model Review {
  id           String     @id @default(uuid())
  restaurantId String     @map("restaurant_id")
  authorId     String     @map("author_id")
  tasteScore   Int        @map("taste_score")
  serviceScore Int        @map("service_score")
  priceScore   Int        @map("price_score")
  title        String
  comment      String?    @map("review_comment")
  reported      Boolean    @default(false) @map("review_reported")
  createdAt    DateTime   @default(now()) @map("created_at")
  status       String     @default("NONE") @map("review_status")
  
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  author       User       @relation(fields: [authorId], references: [id])
  
  @@index([restaurantId])
  @@index([authorId])
  @@index([createdAt])
  @@index([status])
  @@index([reported])
  @@index([restaurantId, createdAt])
  @@index([authorId, createdAt])
  @@index([status, reported])

  @@map("reviews")
}

